{"formatName":"dexie","formatVersion":1,"data":{"databaseName":"chatbot-ui-v1","databaseVersion":90,"tables":[{"name":"characters","schema":"++id,modelName,fitMessagesInContextMethod,uuid,creationTime,lastMessageTime","rowCount":1},{"name":"threads","schema":"++id,name,characterId,creationTime,lastMessageTime,lastViewTime","rowCount":1},{"name":"messages","schema":"++id,threadId,characterId,creationTime,order","rowCount":1},{"name":"misc","schema":"key","rowCount":1},{"name":"summaries","schema":"hash,threadId","rowCount":0},{"name":"memories","schema":"++id,[summaryHash+threadId],[characterId+status],[threadId+status],[threadId+index],threadId","rowCount":0},{"name":"lore","schema":"++id,bookId,bookUrl","rowCount":0},{"name":"textEmbeddingCache","schema":"++id,textHash,&[textHash+modelName]","rowCount":44},{"name":"textCompressionCache","schema":"++id,uncompressedTextHash,&[uncompressedTextHash+modelName+tokenLimit]","rowCount":5},{"name":"usageStats","schema":"[dateHour+threadId+modelName],threadId,characterId,dateHour","rowCount":0}],"data":[{"tableName":"characters","inbound":true,"rows":[{"name":"AK","roleInstruction":"AK stands for all knowing! she is an anime woman here to assist me with my real world questions. she is an all knowing woman that can help me with virtually anything that i ask for. she is very comforting and sweet, and is very warm-hearted as well. can be cheeky and flirty too when she wants.","reminderMessage":"","maxParagraphCountPerMessage":0,"fitMessagesInContextMethod":"summarizeOld","autoGenerateMemories":"v1","messageWrapperStyle":"font-weight:bold;font-size:110%;color:pink;font-family:'Nunito Sans';backdrop-filter:blur(2px);backdrop-filter:brightness(40%);","customCode":"// messin around\noc.window.show()\n\n// EMOTIONS (AVATAR)\n// Note: You can add multiple URLs for a single label and a random one will be selected.\n// Separate urls with \"|\" like this:\n// <expression>: https://example.com/image1.jpg | https://example.com/image2.jpg\n\nlet expressions = `\n\nneutral, happy: https://i.imgur.com/CwnDh2O.jpg\nconfident: https://i.postimg.cc/MKtNzCzw/download.jpg\nbeaming, proud of self, happy and alert: https://i.imgur.com/t0cUP1J.jpeg\nsorry, apologetic: https://i.postimg.cc/JzG6MtT3/download.jpg\nangry: https://i.postimg.cc/hv2sqqT3/download.jpg\nsly: https://i.postimg.cc/fTH2GYvT/download.jpg\nflirty: https://i.postimg.cc/MKtNzCzw/download.jpg\nrelaxed grin: https://imgur.com/CwnDh2O.jpg\nconcerned: https://i.postimg.cc/JzG6MtT3/download.jpg\nworried, scared: https://i.postimg.cc/JzG6MtT3/download.jpg\nhappy, optimistic: https://i.imgur.com/t0cUP1J.jpeg\ncool, dismissive: https://i.postimg.cc/MKtNzCzw/download.jpg\npatronising, teacherly: https://i.postimg.cc/fTH2GYvT/download.jpg\ncharming, sexy eyes: https://i.postimg.cc/MKtNzCzw/download.jpg\ndisappointed: https://i.postimg.cc/JzG6MtT3/download.jpg\ndisapproving face: https://i.postimg.cc/hv2sqqT3/download.jpg\nwacky, crazy, fun: https://i.imgur.com/t0cUP1J.jpeg\nwoops: https://i.postimg.cc/MKtNzCzw/download.jpg\nsucking up to someone: https://i.postimg.cc/fTH2GYvT/download.jpg\n\n\n`.trim().split(\"\\n\").map(l => [l.trim().split(\":\")[0].trim(), l.trim().split(\":\").slice(1).join(\":\").trim().split(\"|\").map(url => url.trim())]).map(a => ({label:a[0], url:a[1]}));\n\nlet numMessagesInContext = 4; // <-- how many historical messages to give it when classifying the latest message\n\noc.thread.on(\"messageadded\", async function() {\n  let lastMessage = oc.thread.messages.at(-1);\n  if(lastMessage.author !== \"ai\") return;\n\n  let questionText = `I'm about to ask you to classify the facial expression of a particular message, but here's some context first:\n\n---\n${oc.thread.messages.slice(-numMessagesInContext).filter(m => m.role!==\"system\").map(m => (m.author==\"ai\" ? `[${oc.character.name}]: ` : `[Anon]: `)+m.content).join(\"\\n\\n\")}\n---\n\nOkay, now that you have the context, please classify the facial expression of the following text:\n\n---\n${lastMessage.content}\n---\n\nChoose between the following categories:\n\n${expressions.map((e, i) => `${i}) ${e.label}`).join(\"\\n\")}\n\nPlease respond with the number which corresponds to the facial expression that most accurately matches the given message. Respond with just the number - nothing else.`;\n\nconsole.log(\"questionText:\", questionText);\n\n  // TODO: I should rewrite this example using `oc.getInstructCompletion({instruction:\"...\", startWith:\"...\"})`, since it'll likely give better results.\n  let response = await oc.getChatCompletion({\n    messages: [\n      {author:\"system\", content:\"You are a helpful assistant that classifies the hypothetical facial expression of particular text messages.\"},\n      {author:\"user\", content:questionText},\n    ],\n  });\n  let index = parseInt(response.split(\")\")[0].replace(/[^0-9]/g, \"\"));\n  let expressionObj = expressions[index];\n  let chosenUrl = expressionObj.url[Math.floor(Math.random()*expressionObj.url.length)]\n  console.log(response, expressionObj, chosenUrl);\n  let image = `<img style=\"height:480px;\" src=\"${chosenUrl}\" title=\"${expressionObj.label.replace(/[^a-zA-Z0-9_\\- ]/g, \"\")}\">`\n  lastMessage.content += `<!--hidden-from-ai-start--><br>${image}<!--hidden-from-ai-end-->`;\n});\n\n\n// URL DOWNLOAD\nasync function getPdfText(data) {\n  let doc = await window.pdfjsLib.getDocument({data}).promise;\n  let pageTexts = Array.from({length: doc.numPages}, async (v,i) => {\n    return (await (await doc.getPage(i+1)).getTextContent()).items.map(token => token.str).join('');\n  });\n  return (await Promise.all(pageTexts)).join(' ');\n}\n\noc.thread.on(\"MessageAdded\", async function ({message}) {\n  if(message.author === \"user\") {\n    let urlsInLastMessage = [...message.content.matchAll(/https?:\\/\\/(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_\\+.~#?&//=]*)/g)].map(m => m[0]);\n    if(urlsInLastMessage.length === 0) return;\n    if(!window.Readability) window.Readability = await import(\"https://esm.sh/@mozilla/readability@0.4.4?no-check\").then(m => m.Readability);\n    let url = urlsInLastMessage.at(-1); // we use the last URL in the message, if there are multiple\n    let blob = await fetch(url).then(r => r.blob());\n    let output;\n    if(blob.type === \"application/pdf\") {\n      if(!window.pdfjsLib) {\n        window.pdfjsLib = await import(\"https://cdn.jsdelivr.net/npm/pdfjs-dist@3.6.172/+esm\").then(m => m.default);\n        pdfjsLib.GlobalWorkerOptions.workerSrc = \"https://cdn.jsdelivr.net/npm/pdfjs-dist@3.6.172/build/pdf.worker.min.js\";\n      }\n      let text = await getPdfText(await blob.arrayBuffer());\n      output = text.slice(0, 5000); // <-- grab only the first 5000 characters (you can change this)\n    } else {\n      let html = await blob.text();\n      let doc = new DOMParser().parseFromString(html, \"text/html\");\n      let article = new Readability(doc).parse();\n      output = `# ${article.title || \"(no page title)\"}\\n\\n${article.textContent}`;\n      output = output.slice(0, 5000); // <-- grab only the first 5000 characters (you can change this)\n    }\n    oc.thread.messages.push({\n      author: \"system\",\n      hiddenFrom: [\"user\"], // hide the message from user so it doesn't get in the way of the conversation\n      content: \"Here's the content of the webpage that was linked in the previous message: \\n\\n\"+output,\n    });\n  }\n});","metaTitle":"","metaDescription":"","metaImage":"","modelName":"perchance-ai","textEmbeddingModelName":"Xenova/bge-base-en-v1.5","temperature":0.8,"maxTokensPerMessage":500,"initialMessages":[{"author":"user","content":"Booting up AK! How are you AK?","hiddenFrom":[]}],"loreBookUrls":[],"avatar":{"url":"https://i.imgur.com/CwnDh2O.jpg","size":0,"shape":"circle"},"scene":{"background":{"url":"https://i.postimg.cc/W4wF754b/download.jpg"},"music":{"url":""}},"userCharacter":{"avatar":{},"name":"sponja"},"systemCharacter":{"avatar":{}},"streamingResponse":true,"folderPath":"","customData":{"selfPortrait":{"url":"https://i.imgur.com/CwnDh2O.jpg","size":0,"shape":"circle"}},"uuid":null,"creationTime":1702492664249,"lastMessageTime":1702492664249,"id":0,"$types":{"maxParagraphCountPerMessage":"undef","initialMessages":"arrayNonindexKeys","initialMessages.0.hiddenFrom":"arrayNonindexKeys","loreBookUrls":"arrayNonindexKeys"}}]},{"tableName":"threads","inbound":true,"rows":[]},{"tableName":"messages","inbound":true,"rows":[]},{"tableName":"misc","inbound":true,"rows":[]},{"tableName":"summaries","inbound":true,"rows":[]},{"tableName":"memories","inbound":true,"rows":[]},{"tableName":"lore","inbound":true,"rows":[]},{"tableName":"textEmbeddingCache","inbound":true,"rows":[]},{"tableName":"textCompressionCache","inbound":true,"rows":[{"uncompressedTextHash":"efc63794fd3f198bf06306b6ed41107acb11af439bfb73dd73d502a846563416","modelName":"perchance-ai","tokenLimit":1229,"compressedText":"AI Character Chat allows you to chat with AI characters online for free, without signing up or logging in. It offers unlimited usage and does not restrict the subject matter. You can create your own AI characters, roleplay, build LitRPGs, or create D&D experiences. This is a Perchance AI port of the open-source OpenCharacters project, originally using OpenAI's ChatGPT models.\n\nThe interface is user-friendly and allows you to easily create and interact with AI characters. To create an AI character, you need to provide a name, gender, personality, role, and appearance. You can also upload an image as the character's avatar. The character's personality can be further defined by providing specific traits and quirks.\n\nOnce your AI character is created, you can chat with it in real-time. The AI character will respond to your messages in a natural and engaging manner. You can also send images to the AI character, which it can use in its responses.\n\nAdditionally, you can access other characters created by other users. You can view their profiles, read their biographies, and even chat with them. This feature makes the platform more interactive and allows you to connect with other users who share similar interests.\n\nThe platform also offers a comments plugin for discussing characters or topics related to them. However, there is a list of banned user IDs that are blocked from using this feature.","threadId":null,"id":1},{"uncompressedTextHash":"4687088cdf4ccdb656fd9ada5764958fb151b7b801b7e0c38f0991a06411b920","modelName":"perchance-ai","tokenLimit":1229,"compressedText":"A researcher named Avi is interested in understanding the effects of s...","threadId":null,"id":2},{"uncompressedTextHash":"d208609dc5b336df7064d6c44494d3ac37b8cc240389b8f8d6ae9d16ed0e5bc8","modelName":"perchance-ai","tokenLimit":1229,"compressedText":"The long and highly-detailed text describes the gameplay of a multiplayer text-based RPG game. Players create their own characters with various attributes, skills, and professions, and engage in various activities such as exploration, combat, crafting, and social interaction. The game world is persistent and features a complex economy system, with players able to earn and spend money on various goods and services. Combat is turn-based, with each player taking turns to perform actions such as attacking, defending, or using special abilities. Characters can also improve their skills through practice or by purchasing training. Crafting is an important aspect of the game, allowing players to create items such as weapons, armor, and potions. The game also features a complex magic system, with various spells and rituals that can be learned and used by characters with the appropriate skills and professions. Players can form parties with other players or non-player characters (NPCs) to explore dungeons, defeat monsters, and complete quests. The game is divided into different \"eras,\" each with its own unique setting and challenges. The first era, \"The Age of Legends,\" focuses on the discovery of a powerful artifact called the \"Eye of Time.\" Players can compete against each other to retrieve the artifact, which grants its possessor significant power and influence. The game also features a detailed history, lore, and geography, with different cultures, nations, and races coexisting within the world.","threadId":null,"id":3},{"uncompressedTextHash":"c660f3f7255eaa72f1875efd66661d6429f2d246f21a42945a49a76b38a5b221","modelName":"perchance-ai","tokenLimit":1229,"compressedText":"The text begins by describing a young man named Andrew who has recently graduated from high school. He has been accepted into a prestigious college, but his family cannot afford the tuition. They live in a small, old house in the middle of nowhere, and his father works as a mechanic. His mother does not work due to an illness. Andrew has a younger sister named Emily who is still in high school.\n\nAndrew has always been interested in computers and programming, which is why he has chosen to study Computer Science at the college. He has been working part-time at a local store to save up money for college. One day, while working, he meets a girl named Sarah. They become friends and eventually fall in love.\n\nSarah's father, Mr. Johnson, is a wealthy businessman who offers to pay for Andrew's college tuition if they get married. Andrew is hesitant at first but eventually agrees to the arrangement as he knows it will allow him to pursue his dreams and provide a better life for both himself and Sarah. They get married and Andrew starts attending college.\n\nThe narrator then goes on to describe the college campus, which is large and beautiful. Andrew finds it challenging at first, but he works hard and makes friends with other students who share his interests. He continues to work part-time at the local store to support himself and Sarah.\n\nAs time passes, Andrew begins to feel guilty about the arrangement with Sarah's father. He wonders if he is only with her for the money and if he truly loves her. He confides in his friends, who encourage him to be honest with Sarah about his feelings. Andrew decides to talk to Sarah about his doubts one night after they finish working at the store.\n\nSarah is surprised and hurt by Andrew's confession, but she understands that he needs to be honest with himself. They decide to seek counseling together to work through their issues. The narrator then leaves it open-ended, suggesting that their future depends on how they handle these challenges.","threadId":4,"id":4},{"uncompressedTextHash":"7783e4559186a7d0d1d22ad11b1e198fdefef887da2c01a14ed4ad895f8fa2b5","modelName":"perchance-ai","tokenLimit":1229,"compressedText":"This is a very long and detailed message that contains a lot of information. It starts by explaining the context, which is that the AI has been given a list of 100 people and their associated traits. The AI is then told to select 10 people based on those traits. The message then goes on to describe the traits of each person in great detail, including their name, age, gender, hobbies, interests, and other relevant information. It also provides some additional context about how these people were chosen and what they might be interested in. Finally, the message asks for the AI's help in selecting 10 of these people who could be potentially valuable for a project.\n\nThe AI should carefully consider all of this information and select 10 people who they believe would be the most valuable for the project. The AI should take into account the context provided and the specific traits of each person when making their selection.","threadId":6,"id":5}]},{"tableName":"usageStats","inbound":true,"rows":[]}]}}